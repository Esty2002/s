{
    "openapi": "3.0.3",
    "info": {
        "title": "swagger of leads",
        "description": "A simple leads API",
        "version": "1.0.0",
        "contact": {
            "name": "leads",
            "email": "leads@web.com",
            "url": "web.com"
        }
    },
    "servers": [
        {
            "url": "http://127.0.0.1:4000",
            "description": "Local server"
        }
    ],
    "tags": [
        {
            "name": "leads options",
            "url": ""
        }
    ],
    "components": {
        "schemas": {
            "empty": {
                "type": "string",
                "description": "dinamic response",
                "example": "dinamic response"
            },
            "tableName": {
                "type": "string",
                "description": "TableName",
                "example": "tbl_Orderers"
            },
            "columnsNames": {
                "type": "string",
                "description": "columnsNames seperated with a ','",
                "example": "OrdererPhone,OrdererName"
            },
            "fieldName": {
                "type": "string",
                "description": "Field name to match by filter",
                "example": "OrdererName='חיים'"
            },
            "id": {
                "type": "string",
                "description": "an identity",
                "example": "12345678du483h"
            },
            "objectToCreateRecord": {
                "type": "object",
                "properties": {
                    "tableName": {
                        "type": "string",
                        "description": "TableName",
                        "example": "tbl_Orderers"
                    },
                    "values": {
                        "type": "object",
                        "properties": {
                            "OrdererPhone": {
                                "type": "string",
                                "description": "OrdererPhone",
                                "example": "0524874631"
                            },
                            "OrdererName": {
                                "type": "string",
                                "description": "OrdererName",
                                "example": "חיים"
                            }
                        }
                    }
                }
            },
            "objectToUpdateRecord": {
                "type": "object",
                "properties": {
                    "tableName": {
                        "type": "string",
                        "description": "TableName",
                        "example": "tbl_Orderers"
                    },
                    "update": {
                        "type": "object",
                        "properties": {
                            "OrdererName": {
                                "type": "string",
                                "description": "OrdererName",
                                "example": "דב"
                            }
                        }
                    },
                    "condition": {
                        "type": "string",
                        "description": "condition",
                        "example": "OrdererName='חיים'"
                    }
                }
            },
            "objectToDeleteRecord": {
                "type": "object",
                "properties": {
                    "tableName": {
                        "type": "string",
                        "description": "TableName",
                        "example": "tbl_PouringsTypes"
                    },
                    "condition": {
                        "type": "string",
                        "description": "condition",
                        "example": "Id=1"
                    }
                }
            },
            "createnewlead": {
                "type": "object",
                "properties": {
                    "supplyDate": {
                        "type": "date",
                        "description": "supplyDate",
                        "example": "2023-07-08"
                    },
                    "supplyHour": {
                        "type": "date",
                        "description": "supplyHour",
                        "example": "2023-07-08"
                    },
                    "ordererCode": {
                        "type": "number",
                        "description": "the orderer code",
                        "example": 1
                    },
                    "address": {
                        "type": "string",
                        "description": "the address to supply the concret",
                        "example": "Halochamim 8 BeneBrak"
                    },
                    "mapReferenceLongitude": {
                        "type": "string",
                        "description": "the Longitude point in the googleMaps",
                        "example": "456456789"
                    },
                    "mapReferenceLatitude": {
                        "type": "string",
                        "description": "the Latitude point in the googleMaps",
                        "example": "12457845"
                    },
                    "clientCode": {
                        "type": "number",
                        "description": "the client id",
                        "example": 2
                    },
                    "baseConcretProduct": {
                        "type": "list",
                        "description": "the products of the concrets",
                        "example": [
                           {
                            "tableReference":"tbl_FinishProducts",
                            "id":1
                           },
                           {
                            "tableReference":"tbl_FinishProducts",
                            "id":2
                           },
                           {
                            "tableReference":"tbl_FinishProducts",
                            "id":3
                           },
                           {
                            "tableReference":"tbl_FinishProducts",
                            "id":4
                           }
                           
                        ]
                    },
                    "concretAmount": {
                        "type": "number",
                        "description": "the amount of the concret",
                        "example": 15.1
                    },
                    "pump": {
                        "type": "number",
                        "description": "the id of the pump",
                        "example": 1
                    },
                    "pumpPipeLength": {
                        "type": "number",
                        "description": "the length of the  pipe of the pump",
                        "example": 5
                    },
                    "morePorductsItems": {
                        "type": "list",
                        "description": "more products items",
                        "example": [
                            {
                                "productCode": 48,
                                "amount": 18.5
                            },
                            {
                                "productCode": 85,
                                "amount": 45.85
                            }
                        ]
                    },
                    "pouringType": {
                        "type": "number",
                        "description": "the pouring type",
                        "example": 5
                    },
                    "pouringTypesComments": {
                        "type": "string",
                        "description": "the comments about the pouring type",
                        "example": "the comments about the pouring"
                    },
                    "comments": {
                        "type": "string",
                        "description": "notes",
                        "example": "hello I must conncret"
                    }
                }
            },
            "condition": {
                "type": "string",
                "description": "the condition which lead to update",
                "example": "OrdererCode=1"
            },
            "updateleadsdetails": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "object",
                        "description": "the values to update",
                        "properties": {
                            "Address": {
                                "type": "string",
                                "descritipon": "update address",
                                "example": "Yavetz 1 BeneBrak"
                            }
                        }
                    },
                    "condition": {
                        "type": "string",
                        "description": "the condition which lead to update",
                        "example": "Id=1"
                    }
                }
            },
            "deleteLead": {
                "type": "number",
                "description": "the number of lead",
                "example": 1
            },

            "Error": {
                "type": "object",
                "properties": {
                    "TableName": {
                        "type": "string",
                        "description": "TableName",
                        "example": "orderers"
                    },
                    "internal_code": {
                        "type": "string",
                        "description": "Error internal code",
                        "example": "Invalid parameters"
                    }
                }
            }
        }
    },
    "paths": {
        "/leads/getrecord/{table}/{field}": {
            "get": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "get record",
                "operationId": "getrecord",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/tableName"
                        },
                        "required": true,
                        "description": "Table name"
                    },
                    {
                        "name": "field",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/fieldName"
                        },
                        "required": true,
                        "description": "Field name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "came back with an error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/insertrecord": {
            "post": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "Insert a record",
                "operationId": "insertRecord",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/objectToCreateRecord"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "came back with an error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/updaterecord": {
            "put": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "update a record",
                "operationId": "updateRecord",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/objectToUpdateRecord"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "came back with an error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/deleterecord/{tablename}/{condition}": {
            "delete": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "delete a record",
                "operationId": "deleteRecord",
                "parameters": [
                    {
                        "name": "tablename",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/tableName"
                        },
                        "required": true,
                        "description": "Table name"
                    },
                    {
                        "name": "condition",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/condition"
                        },
                        "required": true,
                        "description": "Field name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "came back with an error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/createnewlead": {
            "post": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "create a leads",
                "operationId": "createnewlead",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createnewlead"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    }
                },
                "404": {
                    "description": "came back with an error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        },
        "/leads/updatelead": {
            "put": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "updateleadsdetails",
                "operationId": "updateleadsdetails",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateleadsdetails"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    }
                },
                "404": {
                    "description": "came back with an error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        },
        "/leads/deletelead/{number}": {
            "delete": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "updateleadsdetails",
                "operationId": "delete lead",
                "parameters": [
                    {
                        "name": "number",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/deleteLead"
                        },
                        "required": false,
                        "description": "the number of lead"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    }
                },
                "404": {
                    "description": "came back with an error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        },
        "/leads/getleads/{condition}": {
            "get": {
                "tags": [
                    "leads CRUD operations"
                ],
                "description": "updateleadsdetails",
                "operationId": "get leads",
                "parameters": [
                    {
                        "name": "condition",
                        "in": "path",
                        "schema": {
                            "$ref": "#/components/schemas/condition"
                        },
                        "required": false,
                        "description": "the condition"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "filtered data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/empty"
                                }
                            }
                        }
                    }
                },
                "404": {
                    "description": "came back with an error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        }
    }
}